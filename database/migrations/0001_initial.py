# Generated by Django 2.2.6 on 2019-11-03 14:14

from django.db import migrations, models
import django.db.models.deletion
import sorl.thumbnail.fields


class Migration(migrations.Migration):

    initial = True

    dependencies = [
    ]

    operations = [
        migrations.CreateModel(
            name='CollectingTrip',
            fields=[
                ('trip_name', models.CharField(help_text='Enter a name for the collecting trip.', max_length=200, primary_key=True, serialize=False)),
                ('start_date', models.DateField(help_text='Enter the start date of the trip.')),
                ('end_date', models.DateField(help_text='Enter the end date of the trip.')),
                ('notes', models.TextField(blank=True, help_text='Enter any details about the trip (such as journal notes).', max_length=20000, null=True)),
            ],
            options={
                'ordering': ['trip_name'],
            },
        ),
        migrations.CreateModel(
            name='Collector',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(help_text='Enter the full name of the determiner, including middle initial.', max_length=100)),
            ],
            options={
                'ordering': ['name'],
            },
        ),
        migrations.CreateModel(
            name='CommonName',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('common_name', models.CharField(help_text='Enter a common name for a taxon.', max_length=200)),
            ],
            options={
                'ordering': ['common_name'],
            },
        ),
        migrations.CreateModel(
            name='Country',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('country_name', models.CharField(help_text='Enter the name of the country.', max_length=100)),
                ('country_abbr', models.CharField(help_text='Enter the abbreviation for the country.', max_length=5, verbose_name='Abbreviation')),
            ],
            options={
                'verbose_name_plural': 'Countries',
                'ordering': ['country_name'],
            },
        ),
        migrations.CreateModel(
            name='County',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('county_name', models.CharField(help_text='Enter the name of the county.', max_length=100)),
            ],
            options={
                'verbose_name_plural': 'Counties',
                'ordering': ['county_name'],
            },
        ),
        migrations.CreateModel(
            name='Determiner',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(help_text='Enter the full name of the determiner, including middle initial.', max_length=100)),
            ],
            options={
                'ordering': ['name'],
            },
        ),
        migrations.CreateModel(
            name='Family',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('family_name', models.CharField(help_text='Enter the name of the family.', max_length=200)),
            ],
            options={
                'verbose_name_plural': 'Families',
                'ordering': ['family_name'],
            },
        ),
        migrations.CreateModel(
            name='Genus',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('genus_name', models.CharField(help_text='Enter the name of the genus.', max_length=200)),
            ],
            options={
                'verbose_name_plural': 'Genera',
                'ordering': ['genus_name'],
            },
        ),
        migrations.CreateModel(
            name='Gps',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('latitude', models.DecimalField(blank=True, decimal_places=8, help_text='Enter the latitude, in decimal degrees.', max_digits=12, null=True)),
                ('longitude', models.DecimalField(blank=True, decimal_places=8, help_text='Enter the longitute, in decimal degrees (use "-" instead of "W").', max_digits=12, null=True)),
                ('elevation', models.DecimalField(blank=True, decimal_places=2, help_text='Enter the elevation, in meters.', max_digits=8, null=True, verbose_name='Elevation (meters)')),
            ],
            options={
                'verbose_name_plural': 'GPS',
                'ordering': ['latitude', 'longitude'],
            },
        ),
        migrations.CreateModel(
            name='Locality',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('locality_name', models.CharField(blank=True, help_text='Enter a name for the locality.', max_length=200, null=True)),
                ('range', models.CharField(blank=True, help_text='Enter the range from the nearest town to which this locality belongs.', max_length=50, null=True)),
                ('town', models.CharField(blank=True, help_text='Enter the nearest town to this locality.', max_length=200, null=True)),
                ('country', models.ForeignKey(blank=True, help_text='Select the country to which this locality belongs.', null=True, on_delete=django.db.models.deletion.SET_NULL, to='database.Country')),
                ('county', models.ForeignKey(blank=True, help_text='Select the county to which this locality belongs.', null=True, on_delete=django.db.models.deletion.SET_NULL, to='database.County')),
            ],
            options={
                'verbose_name_plural': 'Localities',
                'ordering': ['range', 'town', 'locality_name'],
            },
        ),
        migrations.CreateModel(
            name='Mona',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('mona', models.DecimalField(decimal_places=1, help_text='Enter the MONA (Hodges) # for a species (Lepidoptera only).', max_digits=8)),
            ],
            options={
                'verbose_name_plural': 'Mona numbers',
                'ordering': ['mona'],
            },
        ),
        migrations.CreateModel(
            name='Order',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('order_name', models.CharField(help_text='Enter the name of the order.', max_length=200)),
            ],
            options={
                'ordering': ['order_name'],
            },
        ),
        migrations.CreateModel(
            name='P3',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('p3', models.DecimalField(decimal_places=1, help_text='Enter the P3 (Pohl, Patterson, Pelham 2016) # for a species (Lepidoptera only).', max_digits=8)),
            ],
            options={
                'verbose_name_plural': 'P3 numbers',
                'ordering': ['p3'],
            },
        ),
        migrations.CreateModel(
            name='Preparer',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(help_text='Enter the full name of the determiner, including middle initial.', max_length=100)),
            ],
            options={
                'ordering': ['name'],
            },
        ),
        migrations.CreateModel(
            name='Species',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('species_name', models.CharField(help_text='Enter the name of the species.', max_length=200)),
                ('genus', models.ForeignKey(help_text='Select the genus to which this species belongs.', null=True, on_delete=django.db.models.deletion.SET_NULL, to='database.Genus')),
            ],
            options={
                'verbose_name_plural': 'Species',
                'ordering': ['species_name'],
            },
        ),
        migrations.CreateModel(
            name='SpeciesPage',
            fields=[
                ('title', models.CharField(help_text='Enter a title for the page.', max_length=100, primary_key=True, serialize=False)),
                ('taxonomy', models.TextField(blank=True, help_text='Include any info about the taxonomy of the species, such as synonyms, subspecies, forms, etc.', max_length=100000, null=True)),
                ('description', models.TextField(blank=True, help_text='Write a description for the species.', max_length=100000, null=True)),
                ('similar_species', models.TextField(blank=True, help_text='Write a section about species similar to the one described on the page.', max_length=100000, null=True)),
                ('distribution', models.TextField(blank=True, help_text='Write a section about where the species is found.', max_length=100000, null=True)),
                ('habitat', models.TextField(blank=True, help_text='Write a section about what kind of habitat the species is found in.', max_length=100000, null=True)),
                ('seasonality', models.TextField(blank=True, help_text='Write a section about the flight period of the species/number of broods.', max_length=100000, null=True)),
                ('host_plants', models.TextField(blank=True, help_text='Write a section about the larval food plants, and what parts of the plant the species eats.', max_length=100000, null=True)),
                ('adult_food', models.TextField(blank=True, help_text='Write a section about what the adult feeds on (such as nectar sources).', max_length=100000, null=True)),
                ('behavior', models.TextField(blank=True, help_text='Write a section about the behavior of the species.', max_length=100000, null=True)),
                ('ecology', models.TextField(blank=True, help_text='Write a section about the ecology of the species.', max_length=100000, null=True)),
                ('life_cycle', models.TextField(blank=True, help_text='Write a section about the complete life cycle of the species.', max_length=100000, null=True)),
                ('references', models.TextField(blank=True, help_text='Enter the reference(s) used in the article.', max_length=1000000, null=True)),
                ('species_name', models.OneToOneField(help_text='Select the species for this page.', null=True, on_delete=django.db.models.deletion.SET_NULL, to='database.Species')),
            ],
            options={
                'ordering': ['title'],
            },
        ),
        migrations.CreateModel(
            name='Subfamily',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('subfamily_name', models.CharField(help_text='Enter the name of the subfamily.', max_length=200)),
                ('family', models.ForeignKey(help_text='Select the family to which this subfamily belongs.', null=True, on_delete=django.db.models.deletion.SET_NULL, to='database.Family')),
            ],
            options={
                'verbose_name_plural': 'Subfamilies',
                'ordering': ['subfamily_name'],
            },
        ),
        migrations.CreateModel(
            name='TaxonAuthority',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('authority', models.CharField(help_text='Enter an author and year of publication for a taxon description.', max_length=100)),
            ],
            options={
                'verbose_name_plural': 'Taxon authorities',
                'ordering': ['authority'],
            },
        ),
        migrations.CreateModel(
            name='Tribe',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('tribe_name', models.CharField(help_text='Enter the name of the tribe.', max_length=200)),
                ('subfamily', models.ForeignKey(help_text='Select the subfamily to which this tribe belongs.', null=True, on_delete=django.db.models.deletion.SET_NULL, to='database.Subfamily')),
                ('tribe_authority', models.ForeignKey(blank=True, help_text='Select the authority for the tribe.', null=True, on_delete=django.db.models.deletion.SET_NULL, to='database.TaxonAuthority')),
                ('tribe_common_name', models.ForeignKey(blank=True, help_text='Select the common name of the tribe, if it has one.', null=True, on_delete=django.db.models.deletion.SET_NULL, to='database.CommonName')),
            ],
            options={
                'ordering': ['tribe_name'],
            },
        ),
        migrations.CreateModel(
            name='Subspecies',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('subspecies_name', models.CharField(blank=True, help_text='Enter the name of the subspecies.', max_length=200, null=True)),
                ('species', models.ForeignKey(help_text='Select the species to which this subspecies belongs.', null=True, on_delete=django.db.models.deletion.SET_NULL, to='database.Species')),
                ('subspecies_authority', models.ForeignKey(blank=True, help_text='Select the authority for the subspecies.', null=True, on_delete=django.db.models.deletion.SET_NULL, to='database.TaxonAuthority')),
                ('subspecies_common_name', models.ForeignKey(blank=True, help_text='Select the common name of the subspecies, if it has one.', null=True, on_delete=django.db.models.deletion.SET_NULL, to='database.CommonName')),
                ('subspecies_mona', models.ForeignKey(blank=True, help_text='Select the MONA (Hodges) # for the subspecies (Lepidoptera only). If it lacks its own # but the nominate species has one, enter the nominate species # here.', null=True, on_delete=django.db.models.deletion.SET_NULL, to='database.Mona')),
                ('subspecies_p3', models.ForeignKey(blank=True, help_text='Select the P3 (Pohl, Patterson, Pelham 2016) # for the subspecies (Lepidoptera only). If it lacks its own # but the nominate species has one, enter the nominate species # here.', null=True, on_delete=django.db.models.deletion.SET_NULL, to='database.P3')),
            ],
            options={
                'verbose_name_plural': 'Subspecies',
                'ordering': ['subspecies_name'],
            },
        ),
        migrations.AddField(
            model_name='subfamily',
            name='subfamily_authority',
            field=models.ForeignKey(blank=True, help_text='Select the authority for the subfamily.', null=True, on_delete=django.db.models.deletion.SET_NULL, to='database.TaxonAuthority'),
        ),
        migrations.AddField(
            model_name='subfamily',
            name='subfamily_common_name',
            field=models.ForeignKey(blank=True, help_text='Select the common name of the subfamily, if it has one.', null=True, on_delete=django.db.models.deletion.SET_NULL, to='database.CommonName'),
        ),
        migrations.CreateModel(
            name='State',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('state_name', models.CharField(help_text='Enter the name of the state.', max_length=100)),
                ('state_abbr', models.CharField(help_text='Enter the abbreviation for the state.', max_length=5, verbose_name='Abbreviation')),
                ('country', models.ForeignKey(help_text='Select the country to which this state belongs.', null=True, on_delete=django.db.models.deletion.SET_NULL, to='database.Country')),
            ],
            options={
                'ordering': ['state_name'],
            },
        ),
        migrations.CreateModel(
            name='SpecimenRecord',
            fields=[
                ('usi', models.CharField(help_text='Enter the unique identifier for the specimen.', max_length=20, primary_key=True, serialize=False, verbose_name='Specimen Identifier')),
                ('determined_year', models.IntegerField(blank=True, help_text='Enter the year the determination was made, if any.', null=True)),
                ('sex', models.CharField(blank=True, choices=[('Male', 'Male'), ('Female', 'Female'), ('Unknown', 'Unknown')], default='', help_text='Select the sex of the specimen, if known.', max_length=20)),
                ('stage', models.CharField(blank=True, choices=[('Egg', 'Egg'), ('Larva', 'Larva'), ('Nymph', 'Nymph'), ('Pupa', 'Pupa'), ('Adult', 'Adult')], default='', help_text='Select the stage of the specimen.', max_length=20)),
                ('preparation', models.CharField(blank=True, choices=[('Spread', 'Spread'), ('Pinned', 'Pinned'), ('Minuten', 'Minuten'), ('Pointed', 'Pointed'), ('Envelop', 'Envelop'), ('Container', 'Container'), ('Alcohol', 'Alcohol')], default='', help_text='Select the method with which the specimen was prepared.', max_length=20)),
                ('preparation_date', models.DateField(blank=True, help_text='Enter the date the specimen was pinned/spread.', null=True)),
                ('printed', models.BooleanField(verbose_name='Are the labels for the specimen printed?')),
                ('labeled', models.BooleanField(verbose_name='Is the specimen labeled?')),
                ('photographed', models.BooleanField(verbose_name='Is the specimen photographed?')),
                ('day', models.IntegerField(blank=True, help_text='Enter the day the specimen was collected, if known.', null=True)),
                ('month', models.CharField(blank=True, choices=[('January', 'January'), ('February', 'February'), ('March', 'March'), ('April', 'April'), ('May', 'May'), ('June', 'June'), ('July', 'July'), ('August', 'August'), ('September', 'September'), ('October', 'October'), ('November', 'November'), ('December', 'December')], default='', help_text='Select the month the specimen was collected, if known.', max_length=20)),
                ('year', models.IntegerField(blank=True, help_text='Enter the year the specimen was collected, if known.', null=True)),
                ('method', models.CharField(blank=True, choices=[('Net', 'Net'), ('Reared', 'Reared'), ('Trap', 'Trap'), ('UV trap', 'UV Trap'), ('Light', 'Light'), ('MV light', 'MV Light'), ('MV light sheet', 'MV Light Sheet'), ('UV light', 'UV Light'), ('UV light sheet', 'UV Light Sheet'), ('UV/MV light sheet', 'UV/MV Light Sheet'), ('Bait', 'Bait'), ('By hand', 'By Hand'), ('Sweep', 'Sweep')], default='', help_text='Select the method used to capture the specimen.', max_length=30)),
                ('weather', models.CharField(blank=True, help_text='Enter the weather conditions that occurred during the time the specimen was collected.', max_length=100, null=True)),
                ('temperatureC', models.DecimalField(blank=True, decimal_places=1, help_text='Enter the temperature (Celsius) outside at which the specimen was collected.', max_digits=3, null=True, verbose_name='Temperature (°C)')),
                ('temperatureF', models.DecimalField(blank=True, decimal_places=1, help_text='Enter the temperature (Fahrenheit) outside at which the specimen was collected.', max_digits=3, null=True, verbose_name='Temperature (°F)')),
                ('time_of_day', models.CharField(blank=True, help_text='Enter details about time of day the specimen was collected.', max_length=50, null=True)),
                ('habitat_notes', models.TextField(blank=True, help_text='Enter details about the habitat in which the specimen was collected.', max_length=1000, null=True)),
                ('other_notes', models.TextField(blank=True, help_text='Enter any other details regarding the specimen.', max_length=2000, null=True)),
                ('authority', models.ForeignKey(blank=True, help_text='Select the authority for this specimen.', null=True, on_delete=django.db.models.deletion.SET_NULL, to='database.TaxonAuthority')),
                ('collecting_trip', models.ForeignKey(blank=True, help_text='Enter the name of the collecting trip on which the specimen was collected, if any.', null=True, on_delete=django.db.models.deletion.SET_NULL, to='database.CollectingTrip')),
                ('collector', models.ManyToManyField(blank=True, help_text='Enter the name of the specimen collector(s).', null=True, to='database.Collector', verbose_name='Collector(s)')),
                ('common_name', models.ForeignKey(blank=True, help_text='Select the common name for this specimen, if it has one.', null=True, on_delete=django.db.models.deletion.SET_NULL, to='database.CommonName')),
                ('country', models.ForeignKey(blank=True, help_text='Select the country from which this specimen was collected.', null=True, on_delete=django.db.models.deletion.SET_NULL, to='database.Country')),
                ('county', models.ForeignKey(blank=True, help_text='Select the county from which this specimen was collected.', null=True, on_delete=django.db.models.deletion.SET_NULL, to='database.County')),
                ('determiner', models.ForeignKey(blank=True, help_text='Select the person who made the determination, if any above.', null=True, on_delete=django.db.models.deletion.SET_NULL, to='database.Determiner')),
                ('family', models.ForeignKey(blank=True, help_text='Select the family for this specimen, if known.', null=True, on_delete=django.db.models.deletion.SET_NULL, to='database.Family')),
                ('genus', models.ForeignKey(blank=True, help_text='Select the genus for this specimen, if known.', null=True, on_delete=django.db.models.deletion.SET_NULL, to='database.Genus')),
                ('gps', models.ForeignKey(blank=True, help_text='Select the GPS data from which this specimen was collected.', null=True, on_delete=django.db.models.deletion.SET_NULL, to='database.Gps')),
                ('locality', models.ForeignKey(blank=True, help_text='Select the locality from which this specimen was collected.', null=True, on_delete=django.db.models.deletion.SET_NULL, to='database.Locality')),
                ('mona', models.ForeignKey(blank=True, help_text='Select the MONA (Hodges) # for this specimen (Lepidoptera only).', null=True, on_delete=django.db.models.deletion.SET_NULL, to='database.Mona')),
                ('order', models.ForeignKey(blank=True, help_text='Select the order for this specimen, if known.', null=True, on_delete=django.db.models.deletion.SET_NULL, to='database.Order')),
                ('p3', models.ForeignKey(blank=True, help_text='Select the P3 (Pohl, Patterson, and Pelham 2016) # for this specimen (Lepidoptera only).', null=True, on_delete=django.db.models.deletion.SET_NULL, to='database.P3')),
                ('preparer', models.ForeignKey(blank=True, help_text='Enter the person who prepared the specimen.', null=True, on_delete=django.db.models.deletion.SET_NULL, to='database.Preparer')),
                ('species', models.ForeignKey(blank=True, help_text='Select the species for this specimen, if known.', null=True, on_delete=django.db.models.deletion.SET_NULL, to='database.Species')),
                ('species_page', models.ForeignKey(blank=True, help_text='Select the species page for this specimen, if it has one/if it has been identified to species/subspecies.', null=True, on_delete=django.db.models.deletion.SET_NULL, to='database.SpeciesPage')),
                ('state', models.ForeignKey(blank=True, help_text='Select the state from which this specimen was collected.', null=True, on_delete=django.db.models.deletion.SET_NULL, to='database.State')),
                ('subfamily', models.ForeignKey(blank=True, help_text='Select the subfamily for this specimen, if known.', null=True, on_delete=django.db.models.deletion.SET_NULL, to='database.Subfamily')),
                ('subspecies', models.ForeignKey(blank=True, help_text='Select the subspecies for this specimen, if known.', null=True, on_delete=django.db.models.deletion.SET_NULL, to='database.Subspecies')),
                ('tribe', models.ForeignKey(blank=True, help_text='Select the tribe for this specimen, if known.', null=True, on_delete=django.db.models.deletion.SET_NULL, to='database.Tribe')),
            ],
            options={
                'ordering': ['usi', 'p3', 'order'],
            },
        ),
        migrations.CreateModel(
            name='SpecimenImage',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('image', sorl.thumbnail.fields.ImageField(upload_to='images/specimens')),
                ('position', models.CharField(blank=True, choices=[('dorsal', 'Dorsal'), ('ventral', 'Ventral'), ('lateral', 'Lateral')], help_text='Select the view of the specimen.', max_length=20, null=True, verbose_name='Specimen View')),
                ('species_page', models.ForeignKey(blank=True, help_text='Select the species page for this image, if it has one.', null=True, on_delete=django.db.models.deletion.SET_NULL, to='database.SpeciesPage', verbose_name='Species Page')),
                ('usi_image', models.ForeignKey(blank=True, help_text='Enter the unique specimen identifier for the specimen in the image.', null=True, on_delete=django.db.models.deletion.SET_NULL, to='database.SpecimenRecord', verbose_name='Unique Specimen Identifier')),
            ],
            options={
                'ordering': ['image', 'usi_image'],
            },
        ),
        migrations.CreateModel(
            name='SpeciesImage',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('image', sorl.thumbnail.fields.ImageField(upload_to='images/speciespage/adults')),
                ('caption', models.CharField(blank=True, help_text='Enter a caption for the image.', max_length=100, null=True)),
                ('species', models.ForeignKey(help_text='Select the species.', null=True, on_delete=django.db.models.deletion.SET_NULL, to='database.Species')),
                ('species_page', models.ForeignKey(help_text='Select the species page.', null=True, on_delete=django.db.models.deletion.SET_NULL, to='database.SpeciesPage')),
            ],
            options={
                'ordering': ['image'],
            },
        ),
        migrations.AddField(
            model_name='species',
            name='species_authority',
            field=models.ForeignKey(blank=True, help_text='Select the authority for the species.', null=True, on_delete=django.db.models.deletion.SET_NULL, to='database.TaxonAuthority'),
        ),
        migrations.AddField(
            model_name='species',
            name='species_common_name',
            field=models.ForeignKey(blank=True, help_text='Select the common name of the species, if it has one.', null=True, on_delete=django.db.models.deletion.SET_NULL, to='database.CommonName'),
        ),
        migrations.AddField(
            model_name='species',
            name='species_mona',
            field=models.ForeignKey(blank=True, help_text='Select the MONA (Hodges) # for the species (Lepidoptera only).', null=True, on_delete=django.db.models.deletion.SET_NULL, to='database.Mona'),
        ),
        migrations.AddField(
            model_name='species',
            name='species_p3',
            field=models.ForeignKey(blank=True, help_text='Select the P3 (Pohl, Patterson, Pelham 2016) # for the species (Lepidoptera only).', null=True, on_delete=django.db.models.deletion.SET_NULL, to='database.P3'),
        ),
        migrations.AddField(
            model_name='species',
            name='species_page',
            field=models.OneToOneField(blank=True, help_text='Select the species page for this species (if it has been written.', null=True, on_delete=django.db.models.deletion.SET_NULL, to='database.SpeciesPage'),
        ),
        migrations.CreateModel(
            name='PredatorImage',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('image', sorl.thumbnail.fields.ImageField(upload_to='images/speciespage/predators')),
                ('caption', models.CharField(blank=True, help_text='Enter a caption for the image.', max_length=100, null=True)),
                ('species', models.ForeignKey(help_text='Select the species.', null=True, on_delete=django.db.models.deletion.SET_NULL, to='database.Species')),
                ('species_page', models.ForeignKey(help_text='Select the species page.', null=True, on_delete=django.db.models.deletion.SET_NULL, to='database.SpeciesPage')),
            ],
            options={
                'ordering': ['image'],
            },
        ),
        migrations.AddField(
            model_name='order',
            name='order_authority',
            field=models.ForeignKey(blank=True, help_text='Select the authority for the order.', null=True, on_delete=django.db.models.deletion.SET_NULL, to='database.TaxonAuthority'),
        ),
        migrations.AddField(
            model_name='order',
            name='order_common_name',
            field=models.ForeignKey(blank=True, help_text='Select the common name of the order, if it has one.', null=True, on_delete=django.db.models.deletion.SET_NULL, to='database.CommonName'),
        ),
        migrations.CreateModel(
            name='MapImage',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('image', sorl.thumbnail.fields.ImageField(upload_to='images/speciespage/maps')),
                ('caption', models.CharField(blank=True, help_text='Enter a caption for the image.', max_length=100, null=True)),
                ('species', models.ForeignKey(help_text='Select the species.', null=True, on_delete=django.db.models.deletion.SET_NULL, to='database.Species')),
                ('species_page', models.ForeignKey(help_text='Select the species page.', null=True, on_delete=django.db.models.deletion.SET_NULL, to='database.SpeciesPage')),
            ],
            options={
                'ordering': ['image'],
            },
        ),
        migrations.AddField(
            model_name='locality',
            name='state',
            field=models.ForeignKey(blank=True, help_text='Select the state to which this locality belongs.', null=True, on_delete=django.db.models.deletion.SET_NULL, to='database.State'),
        ),
        migrations.CreateModel(
            name='ImmatureImage',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('image', sorl.thumbnail.fields.ImageField(upload_to='images/speciespage/immatures')),
                ('caption', models.CharField(blank=True, help_text='Enter a caption for the image.', max_length=100, null=True)),
                ('species', models.ForeignKey(help_text='Select the species.', null=True, on_delete=django.db.models.deletion.SET_NULL, to='database.Species')),
                ('species_page', models.ForeignKey(help_text='Select the species page.', null=True, on_delete=django.db.models.deletion.SET_NULL, to='database.SpeciesPage')),
            ],
            options={
                'ordering': ['image'],
            },
        ),
        migrations.CreateModel(
            name='HostPlantImage',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('image', sorl.thumbnail.fields.ImageField(upload_to='images/speciespage/hostplants')),
                ('caption', models.CharField(blank=True, help_text='Enter a caption for the image.', max_length=100, null=True)),
                ('species', models.ForeignKey(help_text='Select the species.', null=True, on_delete=django.db.models.deletion.SET_NULL, to='database.Species')),
                ('species_page', models.ForeignKey(help_text='Select the species page.', null=True, on_delete=django.db.models.deletion.SET_NULL, to='database.SpeciesPage')),
            ],
            options={
                'ordering': ['image'],
            },
        ),
        migrations.CreateModel(
            name='HabitatImage',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('image', sorl.thumbnail.fields.ImageField(upload_to='images/speciespage/habitats')),
                ('caption', models.CharField(blank=True, help_text='Enter a caption for the image.', max_length=100, null=True)),
                ('species', models.ForeignKey(help_text='Select the species.', null=True, on_delete=django.db.models.deletion.SET_NULL, to='database.Species')),
                ('species_page', models.ForeignKey(help_text='Select the species page.', null=True, on_delete=django.db.models.deletion.SET_NULL, to='database.SpeciesPage')),
            ],
            options={
                'ordering': ['image'],
            },
        ),
        migrations.AddField(
            model_name='gps',
            name='locality',
            field=models.ForeignKey(blank=True, help_text='Select the locality to which these GPS data belong.', null=True, on_delete=django.db.models.deletion.SET_NULL, to='database.Locality'),
        ),
        migrations.AddField(
            model_name='genus',
            name='genus_authority',
            field=models.ForeignKey(blank=True, help_text='Select the authority for the genus.', null=True, on_delete=django.db.models.deletion.SET_NULL, to='database.TaxonAuthority'),
        ),
        migrations.AddField(
            model_name='genus',
            name='genus_common_name',
            field=models.ForeignKey(blank=True, help_text='Select the common name of the genus, if it has one.', null=True, on_delete=django.db.models.deletion.SET_NULL, to='database.CommonName'),
        ),
        migrations.AddField(
            model_name='genus',
            name='tribe',
            field=models.ForeignKey(help_text='Select the tribe to which this genus belongs.', null=True, on_delete=django.db.models.deletion.SET_NULL, to='database.Tribe'),
        ),
        migrations.AddField(
            model_name='family',
            name='family_authority',
            field=models.ForeignKey(blank=True, help_text='Select the authority for the family.', null=True, on_delete=django.db.models.deletion.SET_NULL, to='database.TaxonAuthority'),
        ),
        migrations.AddField(
            model_name='family',
            name='family_common_name',
            field=models.ForeignKey(blank=True, help_text='Select the common name of the family, if it has one.', null=True, on_delete=django.db.models.deletion.SET_NULL, to='database.CommonName'),
        ),
        migrations.AddField(
            model_name='family',
            name='order',
            field=models.ForeignKey(help_text='Select the order to which this family belongs.', null=True, on_delete=django.db.models.deletion.SET_NULL, to='database.Order'),
        ),
        migrations.AddField(
            model_name='county',
            name='state',
            field=models.ForeignKey(help_text='Select the state to which this county belongs.', null=True, on_delete=django.db.models.deletion.SET_NULL, to='database.State'),
        ),
        migrations.CreateModel(
            name='CollectingTripImage',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('image', sorl.thumbnail.fields.ImageField(upload_to='images/collecting-trips')),
                ('caption', models.CharField(blank=True, help_text='Enter a caption for the image.', max_length=500, null=True)),
                ('collecting_trip', models.ForeignKey(help_text='Select the collecting trip to which this image belongs.', null=True, on_delete=django.db.models.deletion.SET_NULL, to='database.CollectingTrip')),
            ],
            options={
                'ordering': ['image'],
            },
        ),
        migrations.CreateModel(
            name='AdultFoodImage',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('image', sorl.thumbnail.fields.ImageField(upload_to='images/speciespage/adultfood')),
                ('caption', models.CharField(blank=True, help_text='Enter a caption for the image.', max_length=100, null=True)),
                ('species', models.ForeignKey(help_text='Select the species.', null=True, on_delete=django.db.models.deletion.SET_NULL, to='database.Species')),
                ('species_page', models.ForeignKey(help_text='Select the species page.', null=True, on_delete=django.db.models.deletion.SET_NULL, to='database.SpeciesPage')),
            ],
            options={
                'ordering': ['image'],
            },
        ),
    ]
